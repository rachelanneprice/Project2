package Phase1;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.ArrayList;

public class Phase1 {

 public static void main(String[] args) {
  BigDecimal test = new BigDecimal("123456789");
  ArrayList<BigInteger> bigInts = primeFactors(test);
  for(BigInteger bigInt : bigInts){
   System.out.println(bigInt);
  }
  
 }
 
 public static boolean isPrime(BigInteger num){
  BigInteger primeChecker = new BigInteger("2");
  boolean prime = true;
  while (!primeChecker.equals(num)){
   if(num.mod(primeChecker).equals(BigInteger.ZERO)){
    prime = false;
    break;
   }
   primeChecker = primeChecker.add(BigInteger.ONE);
  }
  return prime;
 }
 
 
 public static ArrayList<BigInteger> primeFactors(BigDecimal number){
  ArrayList<BigInteger> bigIntArr = new ArrayList<BigInteger>(); 
  BigInteger num = number.toBigInteger();
  MathContext rnd = new MathContext(1);
  BigDecimal sqRt = sqRoot(number).round(rnd);
  BigInteger roundedSqRt = sqRt.toBigInteger();
  BigInteger primeFactCheck = new BigInteger("2");
  while(roundedSqRt.compareTo(primeFactCheck) != -1) {
   if(isPrime(primeFactCheck)){
    if(num.mod(primeFactCheck).equals(BigInteger.ZERO)){
     bigIntArr.add(primeFactCheck);
     BigInteger dividing = num.divide(primeFactCheck);
     while(dividing.mod(primeFactCheck).equals(BigInteger.ZERO)){
      bigIntArr.add(primeFactCheck);
      dividing = dividing.divide(primeFactCheck);
     }
     
    }
   }
   primeFactCheck = primeFactCheck.add(BigInteger.ONE);
  }
  return bigIntArr;
 }
 
 
 
 /**
  * 
  * @param num is the BigDecimal number for which we are going to find the square root
  * @return  the BigDecimal number which is an approximation to the square root of num
  *    The accuracy of this approximation is determined by the value of the delta
  *    This method uses an iterative method that is analogous to Netwton's method of finding roots.
  * @author  James Kiper. PhD
  * @date  February 22, 2018
  * 
  */

  
 public static BigDecimal sqRoot(BigDecimal num) {
  BigDecimal approx1;
  BigDecimal approx2;
  approx1 = num;
  approx2 = new BigDecimal("1.0");
  BigDecimal two = new BigDecimal("2.0");
  BigDecimal delta = new BigDecimal("0.5");
  while (  ( approx1.subtract(approx2)).abs().compareTo(delta) > 0 ) {
   approx1 = (approx1.add(approx2).divide(two, 2));
   approx2 = (num.divide(approx1, 2));
  }
  return approx2;
 }
}
